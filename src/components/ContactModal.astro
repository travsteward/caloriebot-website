---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div
  id={id}
  class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden"
>
  <div class="min-h-screen px-4 text-center">
    <div class="fixed inset-0 transition-opacity" aria-hidden="true">
      <div class="absolute inset-0 bg-black opacity-75"></div>
    </div>

    <!-- Modal panel -->
    <div class="inline-block w-full max-w-md p-6 my-8 text-left align-middle transition-all transform bg-dark shadow-xl rounded-lg">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-white">Partner with CalorieBot</h2>
        <button class="close-modal text-gray-400 hover:text-white">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div class="text-gray-300 mb-6">
        <p class="mb-3">Get a custom revenue-sharing model, dedicated server setup, and 1-on-1 growth strategy for your fitness community.</p>
      </div>

      <form id="contact-form" class="space-y-4">
        <div>
          <input
            type="text"
            id="name"
            name="name"
            required
            placeholder="Your name"
            class="w-full px-4 py-2 bg-secondary rounded-lg text-white border border-gray-600 focus:border-discord focus:outline-none"
          />
        </div>

        <div>
          <input
            type="email"
            id="email"
            name="email"
            required
            placeholder="your@email.com"
            class="w-full px-4 py-2 bg-secondary rounded-lg text-white border border-gray-600 focus:border-discord focus:outline-none"
          />
        </div>

        <div>
          <textarea
            id="message"
            name="message"
            required
            placeholder="Tell us about your community size and goals..."
            rows="3"
            class="w-full px-4 py-2 bg-secondary rounded-lg text-white border border-gray-600 focus:border-discord focus:outline-none resize-none"
          ></textarea>
        </div>

        <button
          type="submit"
          class="w-full bg-orange-600 hover:bg-orange-500 text-white font-bold py-3 px-6 rounded-full transition-colors"
        >
          Get Custom Pricing
        </button>
      </form>
    </div>
  </div>
</div>

<style>
  /* Center modal vertically and horizontally */
  .inline-block {
    display: inline-block;
    vertical-align: middle;
  }

  /* Add a pseudo-element for vertical centering */
  .text-center::before {
    content: '';
    display: inline-block;
    height: 100vh;
    vertical-align: middle;
    margin-right: -0.25em;
  }

  /* Fade in animation */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  /* Scale up animation */
  @keyframes scaleUp {
    from { transform: scale(0.95); }
    to { transform: scale(1); }
  }

  /* Apply animations */
  div[id^="contact-modal"]:not(.hidden) {
    animation: fadeIn 0.3s ease-out;
    display: block;
  }

  div[id^="contact-modal"]:not(.hidden) .transform {
    animation: scaleUp 0.3s ease-out;
  }
</style>

<script>
  function setupModal(modalId: string) {
    const modal = document.getElementById(modalId);
    if (!modal) return;

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });

    // Close modal when clicking close button
    const closeButton = modal.querySelector('.close-modal');
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        modal.classList.add('hidden');
      });
    }

    // Handle form submission
    const form = modal.querySelector('#contact-form');
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = new FormData(form as HTMLFormElement);
        const data = {
          name: formData.get('name'),
          email: formData.get('email'),
          message: formData.get('message')
        };

        try {
          // Send form data to the serverless function
          const response = await fetch('/.netlify/functions/contact', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });

          const result = await response.json();

          if (response.ok) {
            alert('Thank you for your message. We\'ll get back to you soon!');
            modal.classList.add('hidden');
            (form as HTMLFormElement).reset();
          } else {
            throw new Error(result.details || result.error || 'Failed to send message');
          }
        } catch (error) {
          console.error('Contact form error:', error);
          alert(`Error sending message: ${error.message}`);
        }
      });
    }
  }

  // Initialize all modals on the page
  document.addEventListener('DOMContentLoaded', () => {
    const modals = document.querySelectorAll('[id^="contact-modal"]');
    modals.forEach(modal => {
      setupModal(modal.id);
    });
  });

  // Make the open function available globally
  window.openContactModal = (modalId: string) => {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('hidden');
    }
  };
</script>